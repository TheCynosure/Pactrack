#!/usr/bin/bash

# Basic function that takes an arg name and decides if it is a package.
# Right now anything that does not start with a hyphen is treated as a package.
function is_package() {
  echo $1 | grep -v -E -- "^-.*" &>/dev/null
}

# Returns whether debug mode is enabled.
function debug_mode() {
  test ! -z ${PACTRACK_DEBUG+x}
}

# Takes a string and logs if debug mode is enabled.
function debug_log() {
  if debug_mode; then
    echo "[DEBUG] $1"
  fi
}

# Takes a string and logs to stderr if debug mode is enabled.
function error_log() {
  if debug_mode; then
    echo 1>&2 "[ERROR] $1"
  fi
}

# Call pacman, but not when in mock mode (for testing).
function call_pacman() {
  if [ -z ${PACTRACK_MOCK_MODE+x} ]; then
    /usr/bin/pacman $@
  fi
}

function find_up() {
  while [ $(pwd) != "/" ] &&  ! ls -a | grep $1 &>/dev/null; do
    cd ..    
  done
  if ls -a | grep $1 &>/dev/null; then
    echo "$(pwd)/.pactrack"
  else
    error_log "No $1 found"
    return 1
  fi
}

# Takes a package name and writes it to the pactrack file if it isn't present yet.
function add_package() {
  # Find the first pactrack file in a parent directory.
  _PACTRACK_PATH=$(find_up .pactrack)
  if [[ $? -eq 1 ]]; then
    return 1
  fi
  # Now we have a valid pactrack path, so we can record it to this file,
  # if it's not already there.
  if ! cat $_PACTRACK_PATH | grep $1 &>/dev/null; then
    echo $1 >>"$_PACTRACK_PATH"
  fi
}

# Takes the package name and removes it from the pactrack file if it is present.
function remove_package() {
  _PACTRACK_PATH=$(find_up .pactrack)
  if [[ $? -eq 1 ]]; then
    return 1
  fi
  if cat $_PACTRACK_PATH | grep $1 &>/dev/null; then
    sed -i "/$1/d" $_PACTRACK_PATH
  fi
}

# For all arguments not starting with a hyphen, add them to the pactrack
# file.
function add_packages() {
  for package_name in $@; do
    if is_package $package_name; then
      debug_log "Adding $package_name"
      if ! add_package $package_name; then 
        error_log "Failed to add $package_name"
      fi
    fi
  done
}

# For all arguments not starting with a hyphen, remove them from the pactrack
# file.
function remove_packages() {
  for package_name in $@; do
    if is_package $package_name; then
      debug_log "Removing $package_name"
      if ! remove_package $package_name; then 
        error_log "Failed to remove $package_name"
      fi
    fi
  done
}

# Parse the pacman arguments and decide whether to add or remove packages.
function parse_pacman_args() {
  if echo "$@" | grep -- "-S" &>/dev/null; then
    debug_log "Add packages"
    # If this is a sync command find all the args not starting with -. Assume these are package names.
    add_packages $@
  elif echo "$@" | grep -- "-R" &>/dev/null; then
    # Same package logic as above, but now removing packages.
    remove_packages $@
  fi
}

if [[ $1 = "-h" ]]; then
  echo "Pactrack uses pacman under the hood, use the options for pacman. Unless you want to remove local dependencies then use: pactrack remove_all"
  call_pacman -h
fi

# Remove all command uninstalls all the packages in the pactrack file.
if [[ $1 = "remove_all" ]]; then
  _PACTRACK_PATH=$(find_up .pactrack)
  # If we failed to find a pactrack file, just fail out.
  if [[ $? -eq 1 ]]; then
    error_log "No pactrack file in current or parent folders."
    exit 1
  fi
  # If the pactrack file is empty, not point in calling pacman.
  if [[ -z $(cat $_PACTRACK_PATH) ]]; then
    # Nothing to do
    exit 0
  fi
  call_pacman -R $(cat $_PACTRACK_PATH)
elif call_pacman $@; then
  parse_pacman_args $@
fi

